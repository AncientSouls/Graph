{"version":3,"sources":["../src/tests/hyper.js"],"names":["HyperTest","generateGraph","ids","describe","it","done","graph","insert","source","target","error","id1","ifError","id2","id3","fetch","sort","id","links","lengthOf","deepEqual","undefined","update","count","equal","remove","removed"],"mappings":"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","file":"hyper.js","sourcesContent":["import { assert } from 'chai';\n\nexport function HyperTest (generateGraph, ids) {\n  describe('Test hyper links', function() {\n    it('should insert and fetch links', (done) => {\n      var graph = generateGraph();\n      graph.insert({ source: [ids[0], ids[1]], target: [ids[0]] }, (error, id1) => {\n        assert.ifError(error);\n        graph.insert({ source: [ids[2]], target: [ids[1]] }, (error, id2) => {\n          assert.ifError(error);\n          graph.insert({ source: [ids[0]], target: [ids[1]] }, (error, id3) => {\n            assert.ifError(error);\n            graph.fetch({ source: ids[0] }, { sort: { id: false } }, (error, links) => {\n              assert.lengthOf(links, 2);\n              assert.deepEqual(links[0], { id: id1, source: [ids[0], ids[1]], target: [ids[0]] });\n              assert.deepEqual(links[1], { id: id3, source: [ids[0]], target: [ids[1]] });\n              done();\n            });\n          });\n        });\n      });\n    });\n    it('should insert and update and fetch links', (done) => {\n      var graph = generateGraph();\n      graph.insert({ source: [ids[0], ids[1], ids[2]], target: [ids[0]] }, (error, id1) => {\n        graph.fetch(id1, undefined, (error, links) => {\n          assert.lengthOf(links, 1);\n          assert.deepEqual(links[0], { id: id1, source: [ids[0], ids[1], ids[2]], target: [ids[0]] });\n          graph.update(id1, { source: [ids[0], ids[2]] }, (error, count) => {\n            assert.ifError(error);\n            assert.equal(count, 1);\n            graph.fetch({ source: [ids[2]] }, undefined, (error, links) => {\n              assert.ifError(error);\n              assert.lengthOf(links, 1);\n              assert.deepEqual(links[0], { id: id1, source: [ids[0], ids[2]], target: [ids[0]] });\n              graph.update({ source: ids[2] }, { target: [ids[1]] }, (error, count) => {\n                assert.ifError(error);\n                assert.equal(count, 1);\n                graph.fetch({ target: ids[1] }, undefined, (error, links) => {\n                  assert.ifError(error);\n                  assert.lengthOf(links, 1);\n                  assert.deepEqual(links[0], { id: id1, source: [ids[0], ids[2]], target: [ids[1]] });\n                  done();\n                });\n              });\n            });\n          });\n        });\n      });\n    });\n    it('should remove links', (done) => {\n      var graph = generateGraph();\n      graph.insert({ source: [ids[0], ids[1]] }, (error, id1) => {\n        graph.insert({ source: [ids[1], ids[2]], target: [ids[2]] }, (error, id2) => {\n          graph.insert({ source: ids[1] }, (error, id3) => {\n            graph.remove(id1, (error, removed) => {\n              assert.ifError(error);\n              assert.equal(removed, 1);\n              graph.remove({ source: ids[1], target: undefined }, (error, removed) => {\n                assert.ifError(error);\n                assert.equal(removed, 1);\n                graph.fetch({ source: ids[1] }, undefined, (error, links) => {\n                  assert.ifError(error);\n                  assert.lengthOf(links, 1);\n                  assert.deepEqual(links[0], { id: id2, source: [ids[1], ids[2]], target: [ids[2]] });\n                  done();\n                });\n              });\n            });\n          });\n        });\n      });\n    });\n  });\n}"]}