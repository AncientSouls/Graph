{"version":3,"sources":["../src/tests/empty.js"],"names":["EmptyTest","generateGraph","ids","describe","it","done","graph","insert","error","id1","ifError","id2","id3","fetch","sort","id","links","lengthOf","deepEqual","undefined","update","source","count","equal","target","remove","removed"],"mappings":"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","file":"empty.js","sourcesContent":["import { assert } from 'chai';\n\nexport function EmptyTest (generateGraph, ids) {\n  describe('Test empty links', function() {\n    it('should insert and fetch links', (done) => {\n      var graph = generateGraph();\n      graph.insert({}, (error, id1) => {\n        assert.ifError(error);\n        graph.insert({}, (error, id2) => {\n          assert.ifError(error);\n          graph.insert({}, (error, id3) => {\n            assert.ifError(error);\n            graph.fetch({}, { sort: { id: false } }, (error, links) => {\n              assert.lengthOf(links, 3);\n              assert.deepEqual(links[0], { id: id1 });\n              assert.deepEqual(links[1], { id: id2 });\n              assert.deepEqual(links[2], { id: id3 });\n              done();\n            });\n          });\n        });\n      });\n    });\n    it('should insert and update and fetch links', (done) => {\n      var graph = generateGraph();\n      graph.insert({}, (error, id1) => {\n        graph.fetch(id1, undefined, (error, links) => {\n          assert.lengthOf(links, 1);\n          assert.deepEqual(links[0], { id: id1 });\n          graph.update(id1, { source: ids[0] }, (error, count) => {\n            assert.ifError(error);\n            assert.equal(count, 1);\n            graph.fetch({ target: undefined }, undefined, (error, links) => {\n              assert.ifError(error);\n              assert.lengthOf(links, 1);\n              assert.deepEqual(links[0], { id: id1, source: ids[0] });\n              graph.update({ target: undefined }, { target: ids[1] }, (error, count) => {\n                assert.ifError(error);\n                assert.equal(count, 1);\n                graph.fetch({ target: ids[1], source: ids[0] }, undefined, (error, links) => {\n                  assert.ifError(error);\n                  assert.lengthOf(links, 1);\n                  assert.deepEqual(links[0], { id: id1, source: ids[0], target: ids[1] });\n                  done();\n                });\n              });\n            });\n          });\n        });\n      });\n    });\n    it('should remove links', (done) => {\n      var graph = generateGraph();\n      graph.insert({}, (error, id1) => {\n        graph.insert({}, (error, id2) => {\n          graph.insert({}, (error, id3) => {\n            graph.remove(id1, (error, removed) => {\n              assert.ifError(error);\n              assert.equal(removed, 1);\n              graph.remove({ source: undefined, target: undefined }, (error, removed) => {\n                assert.ifError(error);\n                assert.equal(removed, 2);\n                graph.fetch({ source: undefined, target: undefined }, undefined, (error, links) => {\n                  assert.ifError(error);\n                  assert.lengthOf(links, 0);\n                  done();\n                });\n              });\n            });\n          });\n        });\n      });\n    });\n  });\n}"]}