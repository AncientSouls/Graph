{"version":3,"sources":["../src/tests/incomplete.js"],"names":["IncompleteTest","generateGraph","ids","describe","it","done","graph","insert","source","error","id1","ifError","id2","target","id3","fetch","undefined","sort","id","links","lengthOf","deepEqual","update","count","equal","remove","removed"],"mappings":"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","file":"incomplete.js","sourcesContent":["import { assert } from 'chai';\n\nexport function IncompleteTest (generateGraph, ids) {\n  describe('Test incomplete links', function() {\n    it('should insert and fetch links', (done) => {\n      var graph = generateGraph();\n      graph.insert({ source: ids[0] }, (error, id1) => {\n        assert.ifError(error);\n        graph.insert({ source: ids[0] }, (error, id2) => {\n          assert.ifError(error);\n          graph.insert({ source: ids[0], target: ids[1] }, (error, id3) => {\n            assert.ifError(error);\n            graph.fetch({ source: ids[0], target: undefined }, { sort: { id: false } }, (error, links) => {\n              assert.lengthOf(links, 2);\n              assert.deepEqual(links[0], { id: id1, source: ids[0] });\n              assert.deepEqual(links[1], { id: id2, source: ids[0] });\n              done();\n            });\n          });\n        });\n      });\n    });\n    it('should insert and update and fetch links', (done) => {\n      var graph = generateGraph();\n      graph.insert({ source: ids[0], target: ids[0] }, (error, id1) => {\n        graph.fetch(id1, undefined, (error, links) => {\n          assert.lengthOf(links, 1);\n          assert.deepEqual(links[0], { id: id1, source: ids[0], target: ids[0] });\n          graph.update(id1, { source: undefined }, (error, count) => {\n            assert.ifError(error);\n            assert.equal(count, 1);\n            graph.fetch({ source: undefined }, undefined, (error, links) => {\n              assert.ifError(error);\n              assert.lengthOf(links, 1);\n              assert.deepEqual(links[0], { id: id1, target: ids[0] });\n              graph.update({ source: undefined }, { target: ids[1] }, (error, count) => {\n                assert.ifError(error);\n                assert.equal(count, 1);\n                graph.fetch({ target: ids[1], source: undefined }, undefined, (error, links) => {\n                  assert.ifError(error);\n                  assert.lengthOf(links, 1);\n                  assert.deepEqual(links[0], { id: id1, target: ids[1] });\n                  done();\n                });\n              });\n            });\n          });\n        });\n      });\n    });\n    it('should remove links', (done) => {\n      var graph = generateGraph();\n      graph.insert({ source: ids[0] }, (error, id1) => {\n        graph.insert({ source: ids[1], target: ids[2] }, (error, id2) => {\n          graph.insert({ source: ids[1] }, (error, id3) => {\n            graph.remove(id1, (error, removed) => {\n              assert.ifError(error);\n              assert.equal(removed, 1);\n              graph.remove({ source: ids[1], target: undefined }, (error, removed) => {\n                assert.ifError(error);\n                assert.equal(removed, 1);\n                graph.fetch({ source: ids[1] }, undefined, (error, links) => {\n                  assert.ifError(error);\n                  assert.lengthOf(links, 1);\n                  done();\n                });\n              });\n            });\n          });\n        });\n      });\n    });\n  });\n}"]}