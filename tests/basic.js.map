{"version":3,"sources":["../src/tests/basic.js"],"names":["InsertUpdateRemoveFetchTest","graph","ids","it","done","insert","source","target","error","id1","id2","id3","fetch","sort","id","links","lengthOf","notDeepEqual","undefined","update","count","ifError","equal","remove","removed"],"mappings":"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","file":"basic.js","sourcesContent":["import { assert } from 'chai';\n\nexport function InsertUpdateRemoveFetchTest (graph, ids) {\n  it('should insert and fetch complete links', (done) => {\n    graph.insert({ source: ids[0], target: ids[0] }, (error, id1) => {\n      graph.insert({ source: ids[0], target: ids[0] }, (error, id2) => {\n        graph.insert({ source: ids[0], target: ids[0] }, (error, id3) => {\n          graph.fetch({ source: ids[0], target: ids[0] }, { sort: { id: false } }, (error, links) => {\n            assert.lengthOf(links, 3);\n            assert.notDeepEqual(links[0], { id: id1, source: ids[0], target: ids[0] });\n            assert.notDeepEqual(links[1], { id: id2, source: ids[0], target: ids[0] });\n            assert.notDeepEqual(links[2], { id: id3, source: ids[0], target: ids[0] });\n            done();\n          });\n        });\n      });\n    });\n  });\n  it('should insert and fetch incomplete links', (done) => {\n    graph.insert({ source: ids[1], target: ids[1] }, (error, id1) => {\n      graph.insert({ source: ids[1] }, (error, id2) => {\n        graph.insert({ target: ids[1] }, (error, id3) => {\n          graph.fetch({ source: ids[1], target: undefined }, { sort: { id: false } }, (error, links) => {\n            assert.lengthOf(links, 1);\n            assert.notDeepEqual(links[0], { id: id2, source: ids[1] });\n            done();\n          });\n        });\n      });\n    });\n  });\n  it('should insert and fetch empty links', (done) => {\n    graph.insert({}, (error, id1) => {\n      graph.insert({ source: ids[2] }, (error, id2) => {\n        graph.insert({}, (error, id3) => {\n          graph.fetch({ source: undefined, target: undefined }, { sort: { id: false } }, (error, links) => {\n            assert.lengthOf(links, 2);\n            assert.notDeepEqual(links[0], { id: id1 });\n            assert.notDeepEqual(links[1], { id: id3 });\n            done();\n          });\n        });\n      });\n    });\n  });\n  it('should update empty to incomplete to complete and fetch result', (done) => {\n    graph.insert({}, (error, id1) => {\n      graph.fetch(id1, undefined, (error, links) => {\n        assert.lengthOf(links, 1);\n        assert.notDeepEqual(links[0], { id: id1 });\n        graph.update(id1, { source: ids[3] }, (error, count) => {\n          assert.ifError(error);\n          assert.equal(count, 1);\n          graph.fetch({ source: ids[3] }, undefined, (error, links) => {\n            assert.ifError(error);\n            assert.lengthOf(links, 1);\n            assert.notDeepEqual(links[0], { id: id1, source: ids[3] });\n            graph.update({ source: ids[3] }, { target: ids[4] }, (error, count) => {\n              assert.ifError(error);\n              assert.equal(count, 1);\n              graph.fetch({ target: ids[4] }, undefined, (error, links) => {\n                assert.ifError(error);\n                assert.lengthOf(links, 1);\n                assert.notDeepEqual(links[0], { id: id1, source: ids[3], target: ids[4] });\n                done();\n              });\n            });\n          });\n        });\n      });\n    });\n  });\n  it('should remove empty, incomplete and complete links', (done) => {\n    graph.insert({}, (error, id1) => {\n      graph.insert({ source: ids[5] }, (error, id2) => {\n        graph.insert({ source: ids[5], target: ids[6] }, (error, id3) => {\n          graph.remove(id1, (error, removed) => {\n            assert.ifError(error);\n            assert.equal(removed, 1);\n            graph.remove({ source: ids[5] }, (error, removed) => {\n              assert.ifError(error);\n              assert.equal(removed, 2);\n              graph.fetch({ source: ids[5] }, undefined, (error, links) => {\n                assert.ifError(error);\n                assert.lengthOf(links, 0);\n                done();\n              });\n            });\n          });\n        });\n      });\n    });\n  });\n}"]}