{"version":3,"sources":["../src/lib/graph.js"],"names":["factoryGraph","ParentClass","Graph","arguments","insert","prototype","Error","update","remove","query","options","fetch","each","map","on","link","callback","context","selector","modifier","event"],"mappings":"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","file":"graph.js","sourcesContent":["/**\n * This method allows you to use Graph class to its inheritance chain.\n *\n * @param {Class} ParentClass\n * @return {Class} Graph\n */\nfunction factoryGraph(ParentClass) {\n  \n  if (!ParentClass) {\n    var ParentClass = class {}\n  }\n  \n  /**\n   * Class to inherit. Class with methods for control links in graph.\n   * Must be completed for adaptation to a particular database.\n   * \n   * @class\n   * @description `import { Graph } from 'ancient-graph';`\n   */\n  class Graph extends ParentClass {\n    \n    /**\n     * Construct new graph and checks for required adaptation methods.\n     * @throws {Error} if the adapter methods is not complete\n     */\n    constructor() {\n      super(...arguments);\n      if (this.insert == Graph.prototype.insert) {\n        throw new Error('Method `insert` is not adapted.');\n      }\n      if (this.update == Graph.prototype.update) {\n        throw new Error('Method `update` is not adapted.');\n      }\n      if (this.remove == Graph.prototype.remove) {\n        throw new Error('Method `remove` is not adapted.');\n      }\n      if (this.query == Graph.prototype.query) {\n        throw new Error('Method `query` is not adapted.');\n      }\n      if (this.options == Graph.prototype.options) {\n        throw new Error('Method `options` is not adapted.');\n      }\n      if (this.fetch == Graph.prototype.fetch) {\n        throw new Error('Method `fetch` is not adapted.');\n      }\n      if (this.each == Graph.prototype.each) {\n        throw new Error('Method `each` is not adapted.');\n      }\n      if (this.map == Graph.prototype.map) {\n        throw new Error('Method `map` is not adapted.');\n      }\n      if (this.on == Graph.prototype.on) {\n        throw new Error('Method `on` is not adapted.');\n      }\n    }\n    \n    /**\n     * Should insert new link into graph.\n     * If the database allows, it is recommended to return a synchronous result. This can be useful in your application. But for writing generic code, it is recommended to only use the callback result.\n     * \n     * @param {Link} link\n     * @param {Graph~insertCallback} [callback]\n     * @param {Object} [context]\n     * @return {string} [id]\n     */\n    insert(link, callback, context) {}\n    \n    /**\n     * Optional callback. If present, called with an error object as the first argument and, if no error, the unique id of inserted link as the second.\n     *\n     * @callback Graph~insertCallback\n     * @param {Error} [error]\n     * @param {string} [id]\n     */\n    \n    /**\n     * Should update to new state of modifier object link by unique id or by link query object.\n     * If the database allows, it is recommended to return a synchronous result. This can be useful in your application. But for writing generic code, it is recommended to only use the callback result.\n     * \n     * @param {string|LinkSelector} selector\n     * @param {LinkModifier} modifier\n     * @param {Graph~updateCallback} [callback]\n     * @param {Object} [context]\n     * @return {number} [count]\n     */\n    update(selector, modifier, callback, context) {}\n    \n    /**\n     * Optional callback. If present, called with an error object as the first argument and, if no error, the number of affected documents as the second.\n     *\n     * @callback Graph~updateCallback\n     * @param {Error} [error]\n     * @param {number} [count]\n     */\n    \n    /**\n     * Should remove link by unique id or by link query object.\n     * \n     * @param {string|LinkSelector} selector\n     * @param {Graph~removeCallback} [callback]\n     * @param {Object} [context]\n     */\n    remove(selector, callback, context) {}\n    \n    /**\n     * Optional callback. If present, called with an error object as the first argument.\n     *\n     * @callback Graph~removeCallback\n     * @param {Error} [error]\n     * @param {number} [count]\n     */\n    \n    /**\n     * Should generate adapter for database query for links search by unique id or by link query object.\n     * \n     * @param {string|LinkSelector} selector\n     * @return {*} query\n     */\n    query(selector) {}\n    \n    /**\n     * Should generate adapter for database options. \n     * \n     * @param {Object} [options]\n     * @return {*} options - a options suitable for the database\n     */\n    options(options) {}\n    \n    /**\n     * Find and all matching links as an Array.\n     * \n     * @param {string|LinkSelector} selector\n     * @param {SelectOptions} [options]\n     * @param {Graph~fetchCallback} [callback]\n     * @return {Link[]} links - result links objects in array\n     */\n    fetch(selector, options, callback) {}\n    \n    /**\n     * Optional callback. If present, called with an error object as the first argument and, if no error, the result links objects in array.\n     *\n     * @callback Graph~fetchCallback\n     * @param {Error} [error]\n     * @param {Link[]} [links]\n     */\n    \n    /**\n     * Should call callback once for each matching document, sequentially and synchronously.\n     * \n     * @param {string|LinkSelector} selector\n     * @param {SelectOptions} [options]\n     * @param {Graph~eachCallback} [callback]\n     */\n    each(selector, options, callback) {}\n    \n    /**\n     * @callback Graph~eachCallback\n     * @param {Link} [link]\n     */\n    \n    /**\n     * Should map callback over all matching documents. Returns an Array.\n     * \n     * @param {string|LinkSelector} selector\n     * @param {SelectOptions} [options]\n     * @param {Graph~mapCallback} [callback]\n     * @return {Array} results\n     */\n    map(selector, options, callback) {}\n    \n    /**\n     * @callback Graph~mapCallback\n     * @param {Link} [link]\n     * @return {*} result\n     */\n    \n    /**\n     * Should subscribe to the events: link, unlink, insert, update, remove.\n     * \n     * @param {string} event - name\n     * @param {Graph~onCallback} callback\n     */\n    on(event, callback) {}\n    \n    /**\n     * @callback Graph~onCallback\n     * @param {Link} [oldLink] - can be undefined on link and insert events\n     * @param {Link} [newLink] - can be undefined on unlink and remove events\n     * @param {Object} [context] - additional app information, such as context.userId\n     */\n  };\n  \n  return Graph;\n}\n\nvar Graph = factoryGraph();\n\nexport { factoryGraph, Graph };"]}