{"version":3,"sources":["../src/lib/graph.js"],"names":["factoryGraph","ParentClass","Graph","collection","fields","config","arguments","aliases","f","insert","prototype","Error","update","remove","query","options","fetch","get","each","map","count","on","link","callback","context","selector","modifier","event"],"mappings":"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","file":"graph.js","sourcesContent":["/**\r\n * This method allows you to use Graph class to its inheritance chain.\r\n *\r\n * @param {Class} ParentClass\r\n * @return {Class} Graph\r\n */\r\nfunction factoryGraph(ParentClass) {\r\n  \r\n  if (!ParentClass) {\r\n    var ParentClass = class {}\r\n  }\r\n  \r\n  /**\r\n   * Class to inherit. Class with methods for control links in graph.\r\n   * Must be completed for adaptation to a particular database.\r\n   * \r\n   * @class\r\n   * @description `import { Graph } from 'ancient-graph';`\r\n   */\r\n  class Graph extends ParentClass {\r\n    \r\n    /**\r\n     * Construct new graph and checks for required adaptation methods.\r\n     * @throws {Error} if the adapter methods is not complete\r\n     * \r\n     * @param {} collection - A pointer to the collection dannymineobhodimye daapteru to work with the graph. This may be a connection to the SQL database and table name, for example, or a collection of Mongo. \r\n     * @param {Object.<string, string>} fields - Comparison of the data in the collection of data in the graph. It is necessary for the adapter.\r\n     * @param {Object} [config] - Additional config.\r\n     * @param {Object} [config.aliases]\r\n     * @param {String} [config.aliases.$]\r\n     */\r\n    constructor(collection, fields, config) {\r\n      super(...arguments);\r\n      this.collection = collection;\r\n      this.fields = fields;\r\n      if (typeof(config) != 'object') var config = {};\r\n      this.config = config;\r\n      if (typeof(config.aliases) != 'object') config.aliases = {};\r\n      for (var f in fields) {\r\n        if (!config.aliases[f]) config.aliases[f] = f;\r\n      } \r\n      if (this.insert == Graph.prototype.insert) {\r\n        throw new Error('Method `insert` is not adapted.');\r\n      }\r\n      if (this.update == Graph.prototype.update) {\r\n        throw new Error('Method `update` is not adapted.');\r\n      }\r\n      if (this.remove == Graph.prototype.remove) {\r\n        throw new Error('Method `remove` is not adapted.');\r\n      }\r\n      if (this.query == Graph.prototype.query) {\r\n        throw new Error('Method `query` is not adapted.');\r\n      }\r\n      if (this.options == Graph.prototype.options) {\r\n        throw new Error('Method `options` is not adapted.');\r\n      }\r\n      if (this.fetch == Graph.prototype.fetch) {\r\n        throw new Error('Method `fetch` is not adapted.');\r\n      }\r\n      if (this.get == Graph.prototype.get) {\r\n        throw new Error('Method `get` is not adapted.');\r\n      }\r\n      if (this.each == Graph.prototype.each) {\r\n        throw new Error('Method `each` is not adapted.');\r\n      }\r\n      if (this.map == Graph.prototype.map) {\r\n        throw new Error('Method `map` is not adapted.');\r\n      }\r\n      if (this.count == Graph.prototype.count) {\r\n        throw new Error('Method `count` is not adapted.');\r\n      }\r\n      if (this.on == Graph.prototype.on) {\r\n        throw new Error('Method `on` is not adapted.');\r\n      }\r\n    }\r\n    \r\n    /**\r\n     * Should insert new link into graph.\r\n     * If the database allows, it is recommended to return a synchronous result. This can be useful in your application. But for writing generic code, it is recommended to only use the callback result.\r\n     * \r\n     * @param {Link} link\r\n     * @param {Graph~insertCallback} [callback]\r\n     * @param {Object} [context]\r\n     * @return {string} [id]\r\n     */\r\n    insert(link, callback, context) {}\r\n    \r\n    /**\r\n     * Optional callback. If present, called with an error object as the first argument and, if no error, the unique id of inserted link as the second.\r\n     *\r\n     * @callback Graph~insertCallback\r\n     * @param {Error} [error]\r\n     * @param {string} [id]\r\n     */\r\n    \r\n    /**\r\n     * Should update to new state of modifier object link by unique id or by link query object.\r\n     * If the database allows, it is recommended to return a synchronous result. This can be useful in your application. But for writing generic code, it is recommended to only use the callback result.\r\n     * \r\n     * @param {string|LinkSelector} selector\r\n     * @param {LinkModifier} modifier\r\n     * @param {Graph~updateCallback} [callback]\r\n     * @param {Object} [context]\r\n     * @return {number} [count]\r\n     */\r\n    update(selector, modifier, callback, context) {}\r\n    \r\n    /**\r\n     * Optional callback. If present, called with an error object as the first argument and, if no error, the number of affected documents as the second.\r\n     *\r\n     * @callback Graph~updateCallback\r\n     * @param {Error} [error]\r\n     * @param {number} [count]\r\n     */\r\n    \r\n    /**\r\n     * Should remove link by unique id or by link query object.\r\n     * \r\n     * @param {string|LinkSelector} selector\r\n     * @param {Graph~removeCallback} [callback]\r\n     * @param {Object} [context]\r\n     */\r\n    remove(selector, callback, context) {}\r\n    \r\n    /**\r\n     * Optional callback. If present, called with an error object as the first argument.\r\n     *\r\n     * @callback Graph~removeCallback\r\n     * @param {Error} [error]\r\n     * @param {number} [count]\r\n     */\r\n    \r\n    /**\r\n     * Should generate adapter for database query for links search by unique id or by link query object.\r\n     * \r\n     * @param {string|LinkSelector} selector\r\n     * @return {*} query\r\n     */\r\n    query(selector) {}\r\n    \r\n    /**\r\n     * Should generate adapter for database options. \r\n     * \r\n     * @param {Object} [options]\r\n     * @return {*} options - a options suitable for the database\r\n     */\r\n    options(options) {}\r\n    \r\n    /**\r\n     * Find and all matching links as an Array.\r\n     * \r\n     * @param {string|LinkSelector} selector\r\n     * @param {SelectOptions} [options]\r\n     * @param {Graph~fetchCallback} [callback]\r\n     * @return {Link[]} links - result links objects in array\r\n     */\r\n    fetch(selector, options, callback) {}\r\n    \r\n    /**\r\n     * Optional callback. If present, called with an error object as the first argument and, if no error, the result links objects in array.\r\n     *\r\n     * @callback Graph~fetchCallback\r\n     * @param {Error} [error]\r\n     * @param {Link[]} [links]\r\n     */\r\n    \r\n    /**\r\n     * Get one first matching link.\r\n     * \r\n     * @param {string|LinkSelector} selector\r\n     * @param {SelectOptions} [options]\r\n     * @param {Graph~getCallback} [callback]\r\n     * @return {Link} link - result link object\r\n     */\r\n    get(selector, options, callback) {}\r\n    \r\n    /**\r\n     * Optional callback. If present, called with an error object as the first argument and, if no error, the result link object.\r\n     *\r\n     * @callback Graph~getCallback\r\n     * @param {Error} [error]\r\n     * @param {Link} [link]\r\n     */\r\n    \r\n    /**\r\n     * Should call callback once for each matching document, sequentially and synchronously.\r\n     * \r\n     * @param {string|LinkSelector} selector\r\n     * @param {SelectOptions} [options]\r\n     * @param {Graph~eachCallback} [callback]\r\n     */\r\n    each(selector, options, callback) {}\r\n    \r\n    /**\r\n     * @callback Graph~eachCallback\r\n     * @param {Link} [link]\r\n     */\r\n    \r\n    /**\r\n     * Should map callback over all matching documents. Returns an Array.\r\n     * \r\n     * @param {string|LinkSelector} selector\r\n     * @param {SelectOptions} [options]\r\n     * @param {Graph~mapCallback} [callback]\r\n     * @return {Array} results\r\n     */\r\n    map(selector, options, callback) {}\r\n    \r\n    /**\r\n     * @callback Graph~mapCallback\r\n     * @param {Link} [link]\r\n     * @return {*} result\r\n     */\r\n    \r\n    /**\r\n     * Should count all matching documents.\r\n     * \r\n     * @param {string|LinkSelector} selector\r\n     * @param {SelectOptions} [options]\r\n     * @param {Graph~countCallback} [callback]\r\n     * @return {number} [count]\r\n     */\r\n    count(selector, options, callback) {}\r\n    \r\n    /**\r\n     * @callback Graph~countCallback\r\n     * @param {Error} [error]\r\n     * @param {number} [count]\r\n     */\r\n    \r\n    /**\r\n     * Should subscribe to the events: link, unlink, insert, update, remove.\r\n     * \r\n     * @param {string} event - name\r\n     * @param {Graph~onCallback} callback\r\n     */\r\n    on(event, callback) {}\r\n    \r\n    /**\r\n     * @callback Graph~onCallback\r\n     * @param {Link} [oldLink] - can be undefined on link and insert events\r\n     * @param {Link} [newLink] - can be undefined on unlink and remove events\r\n     * @param {Object} [context] - additional app information, such as context.userId\r\n     */\r\n  };\r\n  \r\n  return Graph;\r\n}\r\n\r\nvar Graph = factoryGraph();\r\n\r\nexport { factoryGraph, Graph };"]}