{"version":3,"sources":["../src/lib/graph.js"],"names":["factoryGraph","ParentClass","Graph","arguments","insert","prototype","Error","update","remove","query","options","fetch","each","map","on","link","callback","context","selector","modifier","event"],"mappings":"42CAAA;;;;;GAMA,QAASA,aAAT,CAAsBC,WAAtB,CAAmC,CAEjC,GAAI,CAACA,WAAL,CAAkB,CAChB,GAAIA,sEACL,CAED;;;;;;KANiC,GAa3BC,MAb2B,sDAe/B;;;OAIA,gBAAc,kIACHC,SADG,GAEZ,GAAI,MAAKC,MAAL,EAAeF,MAAMG,SAAN,CAAgBD,MAAnC,CAA2C,CACzC,KAAM,IAAIE,MAAJ,CAAU,iCAAV,CACP,CACD,GAAI,MAAKC,MAAL,EAAeL,MAAMG,SAAN,CAAgBE,MAAnC,CAA2C,CACzC,KAAM,IAAID,MAAJ,CAAU,iCAAV,CACP,CACD,GAAI,MAAKE,MAAL,EAAeN,MAAMG,SAAN,CAAgBG,MAAnC,CAA2C,CACzC,KAAM,IAAIF,MAAJ,CAAU,iCAAV,CACP,CACD,GAAI,MAAKG,KAAL,EAAcP,MAAMG,SAAN,CAAgBI,KAAlC,CAAyC,CACvC,KAAM,IAAIH,MAAJ,CAAU,gCAAV,CACP,CACD,GAAI,MAAKI,OAAL,EAAgBR,MAAMG,SAAN,CAAgBK,OAApC,CAA6C,CAC3C,KAAM,IAAIJ,MAAJ,CAAU,kCAAV,CACP,CACD,GAAI,MAAKK,KAAL,EAAcT,MAAMG,SAAN,CAAgBM,KAAlC,CAAyC,CACvC,KAAM,IAAIL,MAAJ,CAAU,gCAAV,CACP,CACD,GAAI,MAAKM,IAAL,EAAaV,MAAMG,SAAN,CAAgBO,IAAjC,CAAuC,CACrC,KAAM,IAAIN,MAAJ,CAAU,+BAAV,CACP,CACD,GAAI,MAAKO,GAAL,EAAYX,MAAMG,SAAN,CAAgBQ,GAAhC,CAAqC,CACnC,KAAM,IAAIP,MAAJ,CAAU,8BAAV,CACP,CACD,GAAI,MAAKQ,EAAL,EAAWZ,MAAMG,SAAN,CAAgBS,EAA/B,CAAmC,CACjC,KAAM,IAAIR,MAAJ,CAAU,6BAAV,CACP,CA5BW,YA6Bb,CAED;;;;;;;;OAlD+B,wDA2DxBS,IA3DwB,CA2DlBC,QA3DkB,CA2DRC,OA3DQ,CA2DC,CAAE,CAElC;;;;;;OAQA;;;;;;;;;OArE+B,sCA+ExBC,QA/EwB,CA+EdC,QA/Ec,CA+EJH,QA/EI,CA+EMC,OA/EN,CA+Ee,CAAE,CAEhD;;;;;;OAQA;;;;;;OAzF+B,sCAgGxBC,QAhGwB,CAgGdF,QAhGc,CAgGJC,OAhGI,CAgGK,CAAE,CAEtC;;;;;;OAQA;;;;;OA1G+B,oCAgHzBC,QAhHyB,CAgHf,CAAE,CAElB;;;;;OAlH+B,wCAwHvBR,QAxHuB,CAwHd,CAAE,CAEnB;;;;;;;OA1H+B,oCAkIzBQ,QAlIyB,CAkIfR,OAlIe,CAkINM,QAlIM,CAkII,CAAE,CAErC;;;;;;OAQA;;;;;;OA5I+B,kCAmJ1BE,QAnJ0B,CAmJhBR,OAnJgB,CAmJPM,QAnJO,CAmJG,CAAE,CAEpC;;;OAKA;;;;;;;OA1J+B,gCAkK3BE,QAlK2B,CAkKjBR,OAlKiB,CAkKRM,QAlKQ,CAkKE,CAAE,CAEnC;;;;OAMA;;;;;;;OA1K+B,oCAkLzBE,QAlLyB,CAkLfR,OAlLe,CAkLNM,QAlLM,CAkLI,CAAE,CAErC;;;;OAMA;;;;;OA1L+B,8BAgM5BI,KAhM4B,CAgMrBJ,QAhMqB,CAgMX,CAAE,CAEtB;;;;;OAlM+B,kBAabf,WAba,EAwMhC,CAED,MAAOC,MACR,CAED,GAAIA,OAAQF,cAAZ,C,QAESA,Y,CAAAA,Y,SAAcE,K,CAAAA,K","file":"graph.js","sourcesContent":["/**\n * This method allows you to use Graph class to its inheritance chain.\n *\n * @param {Class} ParentClass\n * @return {Class} Graph\n */\nfunction factoryGraph(ParentClass) {\n  \n  if (!ParentClass) {\n    var ParentClass = class {}\n  }\n  \n  /**\n   * Class to inherit. Class with methods for control links in graph.\n   * Must be completed for adaptation to a particular database.\n   * \n   * @class\n   * @description `import { Graph } from 'ancient-graph';`\n   */\n  class Graph extends ParentClass {\n    \n    /**\n     * Construct new graph and checks for required adaptation methods.\n     * @throws {Error} if the adapter methods is not complete\n     */\n    constructor() {\n      super(...arguments);\n      if (this.insert == Graph.prototype.insert) {\n        throw new Error('Method `insert` is not adapted.');\n      }\n      if (this.update == Graph.prototype.update) {\n        throw new Error('Method `update` is not adapted.');\n      }\n      if (this.remove == Graph.prototype.remove) {\n        throw new Error('Method `remove` is not adapted.');\n      }\n      if (this.query == Graph.prototype.query) {\n        throw new Error('Method `query` is not adapted.');\n      }\n      if (this.options == Graph.prototype.options) {\n        throw new Error('Method `options` is not adapted.');\n      }\n      if (this.fetch == Graph.prototype.fetch) {\n        throw new Error('Method `fetch` is not adapted.');\n      }\n      if (this.each == Graph.prototype.each) {\n        throw new Error('Method `each` is not adapted.');\n      }\n      if (this.map == Graph.prototype.map) {\n        throw new Error('Method `map` is not adapted.');\n      }\n      if (this.on == Graph.prototype.on) {\n        throw new Error('Method `on` is not adapted.');\n      }\n    }\n    \n    /**\n     * Should insert new link into graph.\n     * If the database allows, it is recommended to return a synchronous result. This can be useful in your application. But for writing generic code, it is recommended to only use the callback result.\n     * \n     * @param {Link} link\n     * @param {Graph~insertCallback} [callback]\n     * @param {Object} [context]\n     * @return {string} [id]\n     */\n    insert(link, callback, context) {}\n    \n    /**\n     * Optional callback. If present, called with an error object as the first argument and, if no error, the unique id of inserted link as the second.\n     *\n     * @callback Graph~insertCallback\n     * @param {Error} [error]\n     * @param {string} [id]\n     */\n    \n    /**\n     * Should update to new state of modifier object link by unique id or by link query object.\n     * If the database allows, it is recommended to return a synchronous result. This can be useful in your application. But for writing generic code, it is recommended to only use the callback result.\n     * \n     * @param {string|LinkSelector} selector\n     * @param {LinkModifier} modifier\n     * @param {Graph~updateCallback} [callback]\n     * @param {Object} [context]\n     * @return {number} [count]\n     */\n    update(selector, modifier, callback, context) {}\n    \n    /**\n     * Optional callback. If present, called with an error object as the first argument and, if no error, the number of affected documents as the second.\n     *\n     * @callback Graph~updateCallback\n     * @param {Error} [error]\n     * @param {number} [count]\n     */\n    \n    /**\n     * Should remove link by unique id or by link query object.\n     * \n     * @param {string|LinkSelector} selector\n     * @param {Graph~removeCallback} [callback]\n     * @param {Object} [context]\n     */\n    remove(selector, callback, context) {}\n    \n    /**\n     * Optional callback. If present, called with an error object as the first argument.\n     *\n     * @callback Graph~removeCallback\n     * @param {Error} [error]\n     * @param {number} [count]\n     */\n    \n    /**\n     * Should generate adapter for database query for links search by unique id or by link query object.\n     * \n     * @param {string|LinkSelector} selector\n     * @return {*} query\n     */\n    query(selector) {}\n    \n    /**\n     * Should generate adapter for database options. \n     * \n     * @param {Object} [options]\n     * @return {*} options - a options suitable for the database\n     */\n    options(options) {}\n    \n    /**\n     * Find and all matching links as an Array.\n     * \n     * @param {string|LinkSelector} selector\n     * @param {SelectOptions} [options]\n     * @param {Graph~fetchCallback} [callback]\n     * @return {Link[]} links - result links objects in array\n     */\n    fetch(selector, options, callback) {}\n    \n    /**\n     * Optional callback. If present, called with an error object as the first argument and, if no error, the result links objects in array.\n     *\n     * @callback Graph~fetchCallback\n     * @param {Error} [error]\n     * @param {Link[]} [links]\n     */\n    \n    /**\n     * Should call callback once for each matching document, sequentially and synchronously.\n     * \n     * @param {string|LinkSelector} selector\n     * @param {SelectOptions} [options]\n     * @param {Graph~eachCallback} [callback]\n     */\n    each(selector, options, callback) {}\n    \n    /**\n     * @callback Graph~eachCallback\n     * @param {Link} [link]\n     */\n    \n    /**\n     * Should map callback over all matching documents. Returns an Array.\n     * \n     * @param {string|LinkSelector} selector\n     * @param {SelectOptions} [options]\n     * @param {Graph~mapCallback} [callback]\n     * @return {Array} results\n     */\n    map(selector, options, callback) {}\n    \n    /**\n     * @callback Graph~mapCallback\n     * @param {Link} [link]\n     * @return {*} result\n     */\n    \n    /**\n     * Should count all matching documents.\n     * \n     * @param {string|LinkSelector} selector\n     * @param {SelectOptions} [options]\n     * @param {Graph~countCallback} [callback]\n     * @return {number} count\n     */\n    count(selector, options, callback) {}\n    \n    /**\n     * @callback Graph~countCallback\n     * @param {Error} [error]\n     * @param {number} [count]\n     */\n    \n    /**\n     * Should subscribe to the events: link, unlink, insert, update, remove.\n     * \n     * @param {string} event - name\n     * @param {Graph~onCallback} callback\n     */\n    on(event, callback) {}\n    \n    /**\n     * @callback Graph~onCallback\n     * @param {Link} [oldLink] - can be undefined on link and insert events\n     * @param {Link} [newLink] - can be undefined on unlink and remove events\n     * @param {Object} [context] - additional app information, such as context.userId\n     */\n  };\n  \n  return Graph;\n}\n\nvar Graph = factoryGraph();\n\nexport { factoryGraph, Graph };"]}