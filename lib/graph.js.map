{"version":3,"sources":["../src/lib/graph.js"],"names":["Graph","insert","prototype","Error","update","remove","query","options","fetch","each","map","on","link","callback","selector","modifier","event"],"mappings":";;;;;;;;;;AAAA;;;;;;IAMaA,K;;AAEX;;;;AAIA,mBAAc;AAAA;;AACZ,QAAI,KAAKC,MAAL,IAAeD,MAAME,SAAN,CAAgBD,MAAnC,EAA2C;AACzC,YAAM,IAAIE,KAAJ,CAAU,iCAAV,CAAN;AACD;AACD,QAAI,KAAKC,MAAL,IAAeJ,MAAME,SAAN,CAAgBE,MAAnC,EAA2C;AACzC,YAAM,IAAID,KAAJ,CAAU,iCAAV,CAAN;AACD;AACD,QAAI,KAAKE,MAAL,IAAeL,MAAME,SAAN,CAAgBG,MAAnC,EAA2C;AACzC,YAAM,IAAIF,KAAJ,CAAU,iCAAV,CAAN;AACD;AACD,QAAI,KAAKG,KAAL,IAAcN,MAAME,SAAN,CAAgBI,KAAlC,EAAyC;AACvC,YAAM,IAAIH,KAAJ,CAAU,gCAAV,CAAN;AACD;AACD,QAAI,KAAKI,OAAL,IAAgBP,MAAME,SAAN,CAAgBK,OAApC,EAA6C;AAC3C,YAAM,IAAIJ,KAAJ,CAAU,kCAAV,CAAN;AACD;AACD,QAAI,KAAKK,KAAL,IAAcR,MAAME,SAAN,CAAgBM,KAAlC,EAAyC;AACvC,YAAM,IAAIL,KAAJ,CAAU,gCAAV,CAAN;AACD;AACD,QAAI,KAAKM,IAAL,IAAaT,MAAME,SAAN,CAAgBO,IAAjC,EAAuC;AACrC,YAAM,IAAIN,KAAJ,CAAU,+BAAV,CAAN;AACD;AACD,QAAI,KAAKO,GAAL,IAAYV,MAAME,SAAN,CAAgBQ,GAAhC,EAAqC;AACnC,YAAM,IAAIP,KAAJ,CAAU,8BAAV,CAAN;AACD;AACD,QAAI,KAAKQ,EAAL,IAAWX,MAAME,SAAN,CAAgBS,EAA/B,EAAmC;AACjC,YAAM,IAAIR,KAAJ,CAAU,6BAAV,CAAN;AACD;AACF;;AAED;;;;;;;;;;;;2BAQOS,I,EAAMC,Q,EAAU,CAAE;;AAEzB;;;;;;;;AAQA;;;;;;;;;;;;2BASOC,Q,EAAUC,Q,EAAUF,Q,EAAU,CAAE;;AAEvC;;;;;;;;AAQA;;;;;;;;;2BAMOC,Q,EAAUD,Q,EAAU,CAAE;;AAE7B;;;;;;;;AAQA;;;;;;;;;0BAMMC,Q,EAAU,CAAE;;AAElB;;;;;;;;;4BAMQP,Q,EAAS,CAAE;;AAEnB;;;;;;;;;;;0BAQMO,Q,EAAUP,O,EAASM,Q,EAAU,CAAE;;AAErC;;;;;;;;AAQA;;;;;;;;;;yBAOKC,Q,EAAUP,O,EAASM,Q,EAAU,CAAE;;AAEpC;;;;;AAKA;;;;;;;;;;;wBAQIC,Q,EAAUP,O,EAASM,Q,EAAU,CAAE;;AAEnC;;;;;;AAMA;;;;;;;;;uBAMGG,K,EAAOH,Q,EAAU,CAAE;;AAEtB;;;;;;;;;;;;;AAMD","file":"graph.js","sourcesContent":["/**\n * Class to inherit. Class with methods for control links in graph.\n * Must be completed for adaptation to a particular database.\n * \n * @class\n */\nexport class Graph {\n  \n  /**\n   * Construct new graph and checks for required adaptation methods.\n   * @throws {Error} if the adapter methods is not complete\n   */\n  constructor() {\n    if (this.insert == Graph.prototype.insert) {\n      throw new Error('Method `insert` is not adapted.');\n    }\n    if (this.update == Graph.prototype.update) {\n      throw new Error('Method `update` is not adapted.');\n    }\n    if (this.remove == Graph.prototype.remove) {\n      throw new Error('Method `remove` is not adapted.');\n    }\n    if (this.query == Graph.prototype.query) {\n      throw new Error('Method `query` is not adapted.');\n    }\n    if (this.options == Graph.prototype.options) {\n      throw new Error('Method `options` is not adapted.');\n    }\n    if (this.fetch == Graph.prototype.fetch) {\n      throw new Error('Method `fetch` is not adapted.');\n    }\n    if (this.each == Graph.prototype.each) {\n      throw new Error('Method `each` is not adapted.');\n    }\n    if (this.map == Graph.prototype.map) {\n      throw new Error('Method `map` is not adapted.');\n    }\n    if (this.on == Graph.prototype.on) {\n      throw new Error('Method `on` is not adapted.');\n    }\n  }\n  \n  /**\n   * Should insert new link into graph.\n   * If the database allows, it is recommended to return a synchronous result. This can be useful in your application. But for writing generic code, it is recommended to only use the callback result.\n   * \n   * @param {Link} link\n   * @param {Graph~insertCallback} [callback]\n   * @return {string} [id]\n   */\n  insert(link, callback) {}\n  \n  /**\n   * Optional callback. If present, called with an error object as the first argument and, if no error, the unique id of inserted link as the second.\n   *\n   * @callback Graph~insertCallback\n   * @param {Error} [error]\n   * @param {string} [id]\n   */\n  \n  /**\n   * Should update to new state of modifier object link by unique id or by link query object.\n   * If the database allows, it is recommended to return a synchronous result. This can be useful in your application. But for writing generic code, it is recommended to only use the callback result.\n   * \n   * @param {string|LinkSelector} selector\n   * @param {LinkModifier} modifier\n   * @param {Graph~updateCallback} [callback]\n   * @return {number} [count]\n   */\n  update(selector, modifier, callback) {}\n  \n  /**\n   * Optional callback. If present, called with an error object as the first argument and, if no error, the number of affected documents as the second.\n   *\n   * @callback Graph~updateCallback\n   * @param {Error} [error]\n   * @param {number} [count]\n   */\n  \n  /**\n   * Should remove link by unique id or by link query object.\n   * \n   * @param {string|LinkSelector} selector\n   * @param {Graph~removeCallback} [callback]\n   */\n  remove(selector, callback) {}\n  \n  /**\n   * Optional callback. If present, called with an error object as the first argument.\n   *\n   * @callback Graph~removeCallback\n   * @param {Error} [error]\n   * @param {number} [count]\n   */\n  \n  /**\n   * Should generate adapter for database query for links search by unique id or by link query object.\n   * \n   * @param {string|LinkSelector} selector\n   * @return {*} query\n   */\n  query(selector) {}\n  \n  /**\n   * Should generate adapter for database options. \n   * \n   * @param {Object} [options]\n   * @return {*} options - a options suitable for the database\n   */\n  options(options) {}\n  \n  /**\n   * Find and all matching links as an Array.\n   * \n   * @param {string|LinkSelector} selector\n   * @param {SelectOptions} [options]\n   * @param {Graph~fetchCallback} [callback]\n   * @return {Link[]} links - result links objects in array\n   */\n  fetch(selector, options, callback) {}\n  \n  /**\n   * Optional callback. If present, called with an error object as the first argument and, if no error, the result links objects in array.\n   *\n   * @callback Graph~fetchCallback\n   * @param {Error} [error]\n   * @param {Link[]} [links]\n   */\n  \n  /**\n   * Should call callback once for each matching document, sequentially and synchronously.\n   * \n   * @param {string|LinkSelector} selector\n   * @param {SelectOptions} [options]\n   * @param {Graph~eachCallback} [callback]\n   */\n  each(selector, options, callback) {}\n  \n  /**\n   * @callback Graph~eachCallback\n   * @param {Link} [link]\n   */\n  \n  /**\n   * Should map callback over all matching documents. Returns an Array.\n   * \n   * @param {string|LinkSelector} selector\n   * @param {SelectOptions} [options]\n   * @param {Graph~mapCallback} [callback]\n   * @return {Array} results\n   */\n  map(selector, options, callback) {}\n  \n  /**\n   * @callback Graph~mapCallback\n   * @param {Link} [link]\n   * @return {*} result\n   */\n  \n  /**\n   * Should subscribe to the events: link, unlink, insert, update, remove.\n   * \n   * @param {string} event - name\n   * @param {Graph-onCallback} callback\n   */\n  on(event, callback) {}\n  \n  /**\n   * @callback Graph~onCallback\n   * @param {Link} [oldLink] - can be undefined on link and insert events\n   * @param {Link} [newLink] - can be undefined on unlink and remove events\n   * @param {Object} [context] - additional app information, such as context.userId\n   */\n};"]}